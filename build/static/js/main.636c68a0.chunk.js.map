{"version":3,"sources":["api/index.js","index.js"],"names":["URL_KEY","URL","getCongressionalDistrictInformation","zipcode","a","fetch","method","headers","data","json","response","console","log","error","App","useState","zipCode","setZipCode","success","setSuccess","cd","setCd","event","preventDefault","alert","info","state","normalizedInput","divisions","count","districtString","newNum","firstNum","secondNum","prop","length","isNaN","secondToLast","twoDigitDistrictNum","id","onSubmit","value","placeholder","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+KACMA,EAAUC,sGAET,SAAeC,EAAtB,kC,4CAAO,WAAoDC,GAApD,iBAAAC,EAAA,+EAEoBC,MAAM,GAAD,OAAIL,EAAJ,oBAAuBG,GAAW,CACtDG,OAAO,MACPC,QAAS,CACL,eAAgB,sBALzB,cAEOC,EAFP,gBAOwBA,EAAKC,OAP7B,cAOOC,EAPP,OAQCC,QAAQC,IAAIF,GARb,kBASQA,GATR,wCAWCC,QAAQE,MAAR,MAXD,gE,iCCEDC,EAAM,WAER,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoBJ,mBAAS,IAA7B,mBAAOK,EAAP,KAAWC,EAAX,KAJc,4CAMd,gDAAAjB,EAAA,6DACIkB,MAAMC,iBACAP,GACFQ,MAAM,2CAHd,kBAM2BtB,EAAoCc,GAN/D,OAMcS,EANd,OAOcC,EAAQD,EAAKE,gBAAgBD,MACnCf,QAAQC,IAAIc,GACNE,EAAYH,EAAKG,UAEnBC,EAAQ,EACRC,EAAiB,GACjBC,EAAS,GACTC,EAAW,GACXC,EAAY,GAfxB,OAAA7B,EAAA,KAgB0BwB,GAhB1B,kDAgBkBM,EAhBlB,WAiBYL,EAAQK,EAAKC,OAAO,EACpBL,EAAiBI,EACjBvB,QAAQC,IAAIkB,GACZE,EAAWF,EAAeD,GAC1BlB,QAAQC,IAAI,4BAA4BoB,GACnCI,MAAMJ,GAtBvB,wBAuBoBK,EAAeH,EAAKC,OAAO,EAC3BG,EAAsBR,EAAeO,GACpCD,MAAME,KACPL,EAAYK,GA1BhC,yDA+BYF,MAAMJ,GA/BlB,uBAgCkBnB,MAhClB,QAkCYmB,IACAD,EAASC,GAETC,IACAF,EAASE,EAAYD,GAGzBX,EADmBK,EAAQ,IAAMK,GAE7BN,GACAN,GAAW,GA3CvB,kDA8CQK,MAAM,mEACNb,QAAQE,MAAR,MA/CR,2DANc,sBAyDd,OACI,sBAAK0B,GAAG,MAAR,UACI,wFACA,uBAAMC,SA5DA,2CA4DN,UACI,8CACA,uBACA,uBACIC,MAAOzB,EACP0B,YAAY,2BACZC,SAAU,SAACrB,GACPL,EAAWK,EAAMsB,OAAOH,UAGhC,wBAAQI,KAAK,SAAb,uBAEJ,yDACA,4BAAI3B,EAAUE,EAAK,WAK/B0B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.636c68a0.chunk.js","sourcesContent":["const URL = 'https://www.googleapis.com/civicinfo/v2/representatives';\nconst URL_KEY = URL+'?key=AIzaSyAlAkPH_bGbIJMNFsRwHFPkYQYDb-1D0qU';\n\nexport async function getCongressionalDistrictInformation (zipcode) {\n    try {\n        const data = await fetch(`${URL_KEY}&address=${zipcode}`, {\n            method:'GET',\n            headers: {\n                'Content-Type': 'application/json'\n        }})\n        const response = await data.json();\n        console.log(response);\n        return response;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n","import React, { useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {getCongressionalDistrictInformation} from './api';\n\n\nconst App = () => {\n\n    const [zipCode, setZipCode] = useState('');\n    const [success, setSuccess] = useState(false);\n    const [cd, setCd] = useState('');\n    \n    async function fetchGeneralInformation () {\n        event.preventDefault();\n        if ( !zipCode) {\n            alert(\"Please enter a number for your zipcode.\")\n        }\n        try {\n            const info = await getCongressionalDistrictInformation(zipCode);\n            const state = info.normalizedInput.state;\n            console.log(state);\n            const divisions = info.divisions;\n\n            let count = 0;\n            let districtString = '';\n            let newNum = '';\n            let firstNum = '';\n            let secondNum = '';\n            for ( let prop in divisions) {           \n                count = prop.length-1;\n                districtString = prop;\n                console.log(districtString);\n                firstNum = districtString[count];\n                console.log(\"should be district number\",firstNum);\n                if (!isNaN(firstNum)) {\n                    let secondToLast = prop.length-2;\n                    let twoDigitDistrictNum = districtString[secondToLast];\n                    if (!isNaN(twoDigitDistrictNum)) {\n                        secondNum = twoDigitDistrictNum;\n                    }\n                    break;\n                } \n            }\n            if (isNaN(firstNum)) {\n                throw error;\n            }\n            if (firstNum) {\n                newNum = firstNum;\n            }\n            if (secondNum) {\n                newNum = secondNum + firstNum;\n            }\n            let districtName = state + '_' + newNum;\n            setCd(districtName);\n            if (info) {\n                setSuccess(true);\n            }\n        } catch (error) {\n            alert('Please provide a valid five digit zipcode in the United States.')\n            console.error(error);\n        }\n    }\n\n    return (\n        <div id=\"App\">\n            <h3>Enter your zipcode to find your congressional district</h3>            \n            <form onSubmit={fetchGeneralInformation}>\n                <label>Zipcode: </label>\n                <br/>\n                <input\n                    value={zipCode}\n                    placeholder=\"Enter your zipcode here.\"\n                    onChange={(event) => {\n                        setZipCode(event.target.value);\n                    }}>\n                </input>\n                <button type='submit'>Submit</button>\n            </form>\n            <h3>Congressional District:</h3>\n            <p>{success ? cd : null}</p>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}